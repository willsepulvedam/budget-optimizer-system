services:
  # Servicio de base de datos PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: budget-optimizer-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - budget-network

  # Servicio Backend
  backend:
    build: ./budget-optimizer-backend
    container_name: budget-optimizer-backend
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
    ports:
      - "${BACKEND_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - budget-network

  # Servicio Frontend
  frontend:
    build: ./bubget-optimizer-frontend
    container_name: budget-optimizer-frontend
    volumes:
      - ./bubget-optimizer-frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://backend:8080
      - VITE_ML_API_URL=http://ml-service:8000
    ports:
      - "${FRONTEND_PORT}:5173"
    depends_on:
      - backend
    networks:
      - budget-network

  # Servicio ML
  ml-service:
    build: ./budgte-optimizer-ml-service
    container_name: budget-optimizer-ml
    environment:
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY}
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      LOG_LEVEL: ${LOG_LEVEL}
    ports:
      - "${ML_SERVICE_PORT}:8000"
    volumes:
      - ./budgte-optimizer-ml-service:/app
    depends_on:
      - backend
      - redis
    networks:
      - budget-network

  # Servicio Redis para ML Service
  redis:
    image: redis:alpine
    container_name: budget-optimizer-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - budget-network

networks:
  budget-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: